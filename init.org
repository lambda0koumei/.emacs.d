* 初期設定
** package初期化
   #+begin_src emacs-lisp
     (setq package-archives
           '(("gnu" . "http://elpa.gnu.org/packages/")
             ("melpa" . "http://melpa.org/packages/")
             ("org" . "http://orgmode.org/elpa/")))
     (package-initialize)
   #+end_src
** leafインストール
   #+begin_src emacs-lisp
     (unless (package-installed-p 'leaf)
       (package-refresh-contents)
       (package-install 'leaf))
   #+end_src
* プラグイン設定
** leaf
   https://github.com/conao3/leaf.el
   #+begin_src emacs-lisp
     (leaf leaf-keywords
       :ensure t
       :init
       :config
       (leaf-keywords-init))
   #+end_src
** blackout
   #+begin_src emacs-lisp
     (leaf blackout
       :ensure t)
   #+end_src
   
** exec-path
   #+begin_src emacs-lisp
     (leaf exec-path-from-shell
       :ensure t
       :config
       (exec-path-from-shell-initialize)
       )

   #+end_src
   
** lsp-mode
   #+begin_src emacs-lisp
     (leaf lsp-mode
       :ensure t
       :custom `((lsp-keymap-prefix . "C-c l"))
       :hook
       (html-mode-hook . lsp)
       :commands (lsp)
       )
   #+end_src

** rainbow-mode
   #+begin_src emacs-lisp
     (leaf rainbow-mode
       :ensure t
       :blackout t
       :hook
       css-mode-hook
       org-mode-hook
       php-mode-hook
       web-mode-hook)
   #+end_src   

** vterm
   https://github.com/akermu/emacs-libvterm
   #+begin_src emacs-lisp
     (leaf vterm
       :ensure t
       :config
       (add-hook 'after-init-hook
                 '(lambda() (vterm)
                    (let* ((w-height (- (frame-height) 5)))
                      (let* ((w (selected-window)))
                        (let* ((w2 (split-window w w-height 'below)))
                          ))))))

   #+end_src
** fish-mode
   #+begin_src emacs-lisp
     (leaf fish-mode
       :ensure t
       )
   #+end_src

** company-mode
   #+begin_src emacs-lisp
     (leaf company
       :ensure t
       :blackout t
       :global-minor-mode global-company-mode
       :custom
       ((company--idle-delay . 0)
        (company-require-match . 'never)
        (company-selection-wrap-around . t)
        (company-tooltip-align-annotations . t)
        (company-minimum-prefix-length . 2))
       )

   #+end_src
   
** yasnippet
   #+begin_src emacs-lisp
     (leaf yasnippet
       :ensure t
       :init (yas-global-mode 1)
       )
   #+end_src
** phpactor   
   #+begin_src emacs-lisp
     (leaf phpactor
       :ensure t
       )
     (leaf company-phpactor
       :ensure t
       )
   #+end_src
** emacs-doom-themes
   https://github.com/hlissner/emacs-doom-themes
   #+begin_src emacs-lisp
     (leaf doom-themes
       :ensure t
       :config
       (load-theme 'doom-one t)
       (doom-themes-org-config)
       )
   #+end_src
** which-key
   https://github.com/justbur/emacs-which-key
   #+begin_src emacs-lisp
     (leaf which-key
       :ensure t
       :blackout t
       :config
       (which-key-setup-side-window-bottom)
       (which-key-mode)
       (define-key help-map (kbd "<f1>") 'which-key-C-h-dispatch)
       )
   #+end_src
** php-mode
   https://github.com/emacs-php/php-mode
   #+begin_src emacs-lisp
     (leaf php-mode
       :ensure t
       :config
       (add-hook 'php-mode-hook (lambda ()
                                  (setq-local company-backends '(company-phpactor company-files))
                                  (setq-local company-transformers '(company-sort-prefer-same-case-prefix))
                                  )))
   #+end_src

** webmode
   [[https://web-mode.org/]]
   #+begin_src emacs-lisp
     (leaf web-mode
       :ensure t
       :config
       (setq web-mode-enable-auto-pairing t)
       (setq web-mode-enable-auto-closing t)
       :custom
       (web-mode-code-indent-offset . 2)
       (web-mode-css-indent-offset . 2)
       (web-mode-markup-indent-offset . 2)
       :mode
       "\\.php\\'"
       )
   #+end_src
** company-prescient
   #+begin_src emacs-lisp
     (leaf company-prescient
       :ensure t
       :global-minor-mode t
       )

     (leaf prescient
       :ensure t
       :custom ((prescient-aggressive-file-save .t))
       :global-minor-mode prescient-persist-mode
       )
   #+end_src
** markdown-mode
   #+begin_src emacs-lisp
     (leaf markdown-mode
       :ensure t)
   #+end_src
** hydra
   [[https://github.com/abo-abo/hydra]]
   #+begin_src emacs-lisp
     (leaf hydra
       :ensure t)
   #+end_src

** emms
   https://www.gnu.org/software/emms/
   #+begin_src emacs-lisp
     (leaf emms
       :ensure t
       :config
       (require 'emms-setup)
       (require 'emms-player-vlc)
       (emms-standard)
       (emms-default-players)
       (setq emms-repeat-playlist t)
       (setq emms-source-file-default-directory "~/Music/")
       (setq emms-player-vlc-command-name "/Applications/VLC.app/Contents/MacOS/VLC")
       )
   #+end_src
* 一般設定
** 自動分割の制御
   Window-choiceを参照。
   #+begin_src emacs-lisp
     (setq split-width-threshold (frame-width))
   #+end_src   
** フォント設定
   #+begin_src emacs-lisp
     (add-to-list 'default-frame-alist '(font . "Ricty Diminished 19"))
   #+end_src
* 関数定義
** my-finder-open
   #+begin_src emacs-lisp
     (defun my-finder-open ()(interactive)
            (shell-command-to-string
             (mapconcat #'shell-quote-argument
                        (list "open" ".") " ")))
   #+end_src  
** my-mac-lock
   #+begin_src emacs-lisp
     (defun my-mac-lock ()(interactive)
            (shell-command-to-string
             (mapconcat #'shell-quote-argument
                        (list "pmset" "displaysleepnow") " ")))
   #+end_src   
** my-move-border
   #+begin_src emacs-lisp
     (defun my-move-border(move-x-amount move-y-amount)
       (seq-let (move-x-dir move-y-dir)(mapcar (lambda (edge) (if (zerop edge) 1 -1)) (window-edges))
         (enlarge-window-horizontally (* move-x-amount move-x-dir))
         (enlarge-window (* move-y-amount move-y-dir))
         ))

     (defun my-move-border-left (arg) (interactive "p")
            (my-move-border (- arg) 0))
     (defun my-move-border-right (arg) (interactive "p")
            (my-move-border arg 0))
     (defun my-move-border-top (arg) (interactive "p")
            (my-move-border 0 (- arg)))
     (defun my-move-border-bottom (arg) (interactive "p")
            (my-move-border 0 arg))
   #+end_src

** my-search-char
   #+begin_src emacs-lisp
     (defvar my-search-target-char nil)

     (defun my-search-target-char-reset()
       (interactive)
       (when my-search-target-char
         (unhighlight-regexp (char-to-string my-search-target-char))
         (setq my-search-target-char nil)))

     (defun my-isearch-forward-char(char)
       (interactive "c")
       (when (> char 32)
         (setq my-search-target-char char)
         (highlight-regexp (char-to-string my-search-target-char))
         (call-interactively 'my-search-forward-char)))

     (defun my-isearch-backward-char(char)
       (interactive "c")
       (when (> char 32)
         (setq my-search-target-char char)
         (highlight-regexp (char-to-string my-search-target-char))
         (call-interactively 'my-search-backward-char)))

     (defun my-search-forward-char()
       (interactive)
       (let* ((char my-search-target-char))
         (when (= (char-after (point)) char)(forward-char))
         (search-forward (char-to-string char))
         (backward-char)
         ))

     (defun my-search-backward-char()
       (interactive)
       (let* ((char my-search-target-char))
         (search-backward(char-to-string char))))

     (defun my-hydra-search-forward-char()
       (interactive)
       (if my-search-target-char
           (call-interactively 'my-search-forward-char)
         (call-interactively 'my-isearch-forward-char)))

     (defun my-hydra-search-backward-char()
       (interactive)
       (if my-search-target-char
           (call-interactively 'my-search-backward-char)
         (call-interactively 'my-isearch-backward-char)))

     (defhydra hydra-search-char(:post (my-search-target-char-reset) :hint nil)
       ("f" my-hydra-search-forward-char "search-forward-char")
       ("b" my-hydra-search-backward-char "search-backward-char")
       ("r" my-search-target-char-reset "char-reset")
       ("SPC" set-mark-command "set-mark-toggle")
       ("q" nil "quit")
       )
   #+end_src
   
* キーバインド
** my-map
   #+begin_src emacs-lisp
     (define-prefix-command 'my-map)
     (global-set-key (kbd "s-m") 'my-map)
     (define-key 'my-map (kbd "s-e") 'my-load-init-el)
     (define-key 'my-map (kbd "s-f") 'my-finder-open)
     (define-key 'my-map (kbd "s-r") 'query-replace)
     (define-key 'my-map (kbd "s-l") 'my-mac-lock)
     (define-key 'my-map (kbd "s-v") 'vterm)
     (define-key 'my-map (kbd "s-s") 'my-switch-scratch)
     (define-key 'my-map (kbd "s-i s-r") 'indent-region)
     (define-key 'my-map (kbd "s-i s-b") 'my-indent-buffer)
     (define-key 'my-map (kbd "s-b") 'bookmark-bmenu-list)
     (define-key 'my-map (kbd "s") 'sort-lines)

     (defun my-indent-buffer ()
       (interactive)(indent-region (point-min) (point-max)))

     (defun my-load-init-el()
       (interactive)(load-file (expand-file-name "init.el" user-emacs-directory)))

     (defun my-switch-scratch ()
       (interactive) (switch-to-buffer "*scratch*"))
   #+end_src
** Ctrl + キー
   #+begin_src emacs-lisp
     (global-set-key (kbd "C-f") (lambda (arg) (interactive "p")
                                   (cond
                                    ((= arg 4) (hydra-search-char/my-hydra-search-forward-char))
                                    (t (forward-char)))))

     (global-set-key (kbd "C-b") (lambda (arg) (interactive "p")
                                   (cond
                                    ((= arg 4) (hydra-search-char/my-hydra-search-backward-char))
                                    (t (backward-char)))))

   #+end_src   
** Command + キー
   #+BEGIN_SRC emacs-lisp
     (define-key key-translation-map [?\s-'] [?\C-c ?\'])
     (global-set-key (kbd "s--") 'text-scale-decrease)
     (global-set-key (kbd "s-=") 'text-scale-increase)
     (global-set-key (kbd "s-a") 'mark-whole-buffer)
     (global-set-key (kbd "s-c") 'kill-ring-save)
     (global-set-key (kbd "s-f") 'isearch-forward)
     (global-set-key (kbd "s-h") 'my-move-border-left)
     (global-set-key (kbd "s-j") 'my-move-border-bottom)
     (global-set-key (kbd "s-k") 'my-move-border-top)
     (global-set-key (kbd "s-l") 'my-move-border-right)
     (global-set-key (kbd "s-n") 'other-window)
     (global-set-key (kbd "s-q") 'save-buffers-kill-terminal)
     (global-set-key (kbd "s-r") 'query-replace)
     (global-set-key (kbd "s-s") '(lambda () (interactive) (my-indent-buffer) (save-buffer)))
     (global-set-key (kbd "s-v") 'yank)
     (global-set-key (kbd "s-w") 'delete-window)
     (global-set-key (kbd "s-x") 'kill-region)
     (global-set-key (kbd "s-z") 'undo)
   #+END_SRC

** Ctrl + Command + キー
   #+begin_src emacs-lisp
     (define-key global-map (kbd "C-s-f") 'toggle-frame-fullscreen)
   #+end_src

* その他
** emacsウィンドウのフォーカスのオンオフを分かりやすくする  
   #+BEGIN_SRC emacs-lisp
     (defvar my-temp-cursor-color (face-attribute 'cursor :background))
     (add-hook 'focus-in-hook '(lambda () (set-cursor-color my-temp-cursor-color)))
     (add-hook 'focus-out-hook '(lambda () (set-cursor-color "#ff0000")))
   #+end_src

** バックアップファイルの作成の抑止
   #+begin_src emacs-lisp
     (setq make-backup-files nil)
   #+end_src
** モードラインに時計を表示する
   #+begin_src emacs-lisp
     (display-time-mode t)
     (setq display-time-interval 1)
     (setq display-time-string-forms
           '((format "%s/%s[%s] %s:%s:%s"
                     month day dayname 24-hours minutes seconds)))
   #+end_src
   
** その他
   #+begin_src emacs-lisp
     (global-display-line-numbers-mode)
     (ido-mode 1)
     (mac-auto-ascii-mode 1)
     (require 'generic-x)
     (savehist-mode 1)
     (set-face-foreground 'hi-yellow "#000000")
     (set-face-foreground 'show-paren-match "#ff0000")
     (setq mac-command-key-is-meta nil)
     (setq mac-command-modifier 'super)
     (setq mac-option-modifier 'meta)
     (setq mac-pass-command-to-system nil)
     (setq org-use-speed-commands t)
     (setq initial-buffer-choice "~/Documents/journal.org")
     (setq initial-scratch-message "")
     (setq-default indent-tabs-mode nil)
     (show-paren-mode 1)
     (tool-bar-mode -1)
   #+END_SRC   



