* 初期設定
** package初期化
   #+begin_src emacs-lisp
     (package-initialize)
     (setq package-archives
	   '(("gnu" . "http://elpa.gnu.org/packages/")
	     ("melpa" . "http://melpa.org/packages/")
	     ("org" . "http://orgmode.org/elpa/")))
   #+end_src
** leafインストール
   #+begin_src emacs-lisp
     (unless (package-installed-p 'leaf)
       (package-refresh-contents)
       (package-install 'leaf))
   #+end_src
* プラグイン設定

** leaf
   https://github.com/conao3/leaf.el
   #+begin_src emacs-lisp
     (leaf leaf-keywords
       :ensure t
       :init
       :config
       (leaf-keywords-init))
   #+end_src

** vterm
   https://github.com/akermu/emacs-libvterm
   #+begin_src emacs-lisp
     (leaf vterm
       :ensure t
       :config
       (add-hook 'emacs-startup-hook
		 '(lambda() (vterm)
		    (let* ((w (selected-window)))
		      (let* ((size (- (frame-height) 5)) (w2 (split-window w size))))))))

   #+end_src
   
** auto-complete
   https://github.com/auto-complete/auto-complete
   #+begin_src emacs-lisp
     (leaf auto-complete
       :ensure t
       :config
       (ac-config-default))
   #+end_src

** ac-php
   https://github.com/xcwen/ac-php
   #+begin_src emacs-lisp
     (leaf ac-php
       :ensure t
       :config
       (add-hook 'php-mode-hook
		 '(lambda()
		    (require 'ac-php)
		    (auto-complete-mode t)
		    (setq ac-sources '(ac-source-php))))
       (add-hook 'web-mode-hook
		 '(lambda()
		    (require 'ac-php)
		    (setq web-mode-ac-sources-alist '(("php" . (ac-source-php))))
		    ))
       )
   #+end_src   

** iceberg
   https://github.com/conao3/iceberg-theme.el
   #+begin_src emacs-lisp
     (leaf iceberg-theme
       :ensure t
       :config
       (iceberg-theme-create-theme-file)
       )
   #+end_src

** which-key
   https://github.com/justbur/emacs-which-key
   prefixキーを押した際に次のキーを表示する。
   個人的に必須。
   #+begin_src emacs-lisp
     (leaf which-key
       :ensure t
       :config
       (which-key-setup-side-window-bottom)
       (which-key-mode)
       (define-key help-map (kbd "<f1>") 'which-key-C-h-dispatch)
       )
   #+end_src
** php-mode
   https://github.com/emacs-php/php-mode
   #+begin_src emacs-lisp
     (leaf php-mode
       :ensure t
       )

   #+end_src
   
** webmode
   [[https://web-mode.org/]]
   #+begin_src emacs-lisp
     (leaf web-mode
       :ensure t
       :config
       (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
       )
   #+end_src

** markdown-mode
   #+begin_src emacs-lisp
     (leaf markdown-mode
       :ensure t)
   #+end_src

** hydra
   [[https://github.com/abo-abo/hydra]]
   #+begin_src emacs-lisp
     (leaf hydra
       :ensure t)
   #+end_src
*** hydra-menu
    #+begin_src emacs-lisp
      (defhydra hydra-menu
	(:pre (mac-select-input-source 'ascii-capable-keyboard))
	"
      CheatSheet:
      c-s:isearch-forward| c-r: isearch-backward| c-/:undo| c-g c-/: redo

      "
	("e" (load-file (expand-file-name "init.el" user-emacs-directory)) "eval-init.el" :exit t :column "[e]val")
	("i" indent-region "indent-region" :exit t :column "other")
	("b" bookmark-bmenu-list "bookmark list" :exit t)
	("o" toggle-truncate-lines "toggle truncate-lines" :exit t)
	("r" query-replace "replace" :exit t)
	("sc" (switch-to-buffer "*scratch*") "scratch" :exit t)
	("so" sort-lines "sort-lines" :exit t)
	("v" vterm "vterm" :exit t)
	("q" nil "quit hydra-menu")
	("s-m" nil "quit hydra-menu")
	)

    #+end_src

* 一般設定

** 自動分割の制御
   Window-choiceを参照。
   #+begin_src emacs-lisp
     (setq split-width-threshold (frame-width))
   #+end_src   

** フォント設定
   #+begin_src emacs-lisp
     (add-to-list 'default-frame-alist '(font . "Ricty Diminished 19"))

   #+end_src

** カラーテーマ
   #+begin_src emacs-lisp
					     ;(load-theme 'misterioso t)
     (load-theme 'solarized-iceberg-dark t)
   #+end_src

* 関数定義
** move-border
   #+begin_src emacs-lisp
     (defun my-move-border(arg) (interactive)
	    (seq-let (move-left move-top move-right move-bottom) arg
	      (seq-let (zero-rowedge zero-coledge) (mapcar 'zerop (window-edges))
		(call-interactively
		 (cond ((and move-left zero-rowedge) 'shrink-window-horizontally)
		       ((and move-left (not zero-rowedge)) 'enlarge-window-horizontally)
		       ((and move-top zero-coledge) 'shrink-window)
		       ((and move-top (not zero-coledge)) 'enlarge-window)
		       ((and move-right zero-rowedge) 'enlarge-window-horizontally)
		       ((and move-right (not zero-rowedge)) 'shrink-window-horizontally)
		       ((and move-bottom zero-coledge) 'enlarge-window)
		       ((and move-bottom (not zero-coledge)) 'shrink-window)
		       )))))

     (defun my-move-border-left() (interactive)
	    (my-move-border '(t)))
     (defun my-move-border-top() (interactive)
	    (my-move-border '(nil t)))
     (defun my-move-border-right() (interactive)
	    (my-move-border '(nil nil t )))
     (defun my-move-border-bottom() (interactive)
	    (my-move-border '(nil nil nil t)))
   #+end_src


* キーバインド
** Command + キー
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "s--") 'text-scale-decrease)
     (global-set-key (kbd "s-l") 'my-move-border-right)
     (global-set-key (kbd "s-h") 'my-move-border-left)
     (global-set-key (kbd "s-j") 'my-move-border-bottom)
     (global-set-key (kbd "s-k") 'my-move-border-top)
     (global-set-key (kbd "s-r") 'query-replace)

     (global-set-key (kbd "s-=") 'text-scale-increase)
     (global-set-key (kbd "s-a") 'mark-whole-buffer)
     (global-set-key (kbd "s-c") 'kill-ring-save)
     (global-set-key (kbd "s-f") 'isearch-forward)
     (global-set-key (kbd "s-n") 'other-window)
     (global-set-key (kbd "s-m") 'hydra-menu/body)
     (global-set-key (kbd "s-q") 'save-buffers-kill-terminal)
     (global-set-key (kbd "s-s") 'save-buffer)
     (global-set-key (kbd "s-v") 'yank)
     (global-set-key (kbd "s-w") 'delete-window)
     (global-set-key (kbd "s-x") 'kill-region)
     (global-set-key (kbd "s-z") 'undo)

   #+END_SRC

** Ctrl + Command + キー
   #+begin_src emacs-lisp
     (define-key global-map (kbd "C-s-f") 'toggle-frame-fullscreen)
   #+end_src

** Ctrl + Shift + キー
   #+begin_src emacs-lisp
					     ;(global-set-key (kbd "C-S-V") 'scroll-down-command)
   #+end_src

* 変数
  #+BEGIN_SRC emacs-lisp
    (display-time-mode 1)
    (global-display-line-numbers-mode)
    (ido-mode 1)
    (mac-auto-ascii-mode 1)
    (menu-bar-mode -1)
    (savehist-mode 1)
    (setq tab-always-indent 'complete)
    (setq mac-command-key-is-meta nil)
    (setq mac-command-modifier 'super)
    (setq mac-option-modifier 'meta)
    (setq mac-pass-command-to-system nil)
    (setq org-use-speed-commands t)
    (show-paren-mode 1)
    (set-face-foreground 'show-paren-match "#ff0000")
    (tool-bar-mode -1)
  #+END_SRC



